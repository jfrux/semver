component name="semverTest" extends="mxunit.framework.TestCase" {
	variables.semver = createObject("component","semver").init();
	variables.eq = semver.eq;
	variables.gt = semver.gt;
	variables.lt = semver.lt;
	variables.neq = semver.neq;
	variables.cmp = semver.cmp;
	variables.gte = semver.gte;
	variables.lte = semver.lte;
	variables.satisfies = semver.satisfies;
	variables.validRange = semver.validRange;
	variables.inc = semver.inc;
	variables.replaceStars = semver.replaceStars;
	variables.toComparators = semver.toComparators;

	public void function comparison_tests(t) {
var tests = [ ["0.0.0", "0.0.0foo"]
  , ["0.0.1", "0.0.0"]
  , ["1.0.0", "0.9.9"]
  , ["0.10.0", "0.9.0"]
  , ["0.99.0", "0.10.0"]
  , ["2.0.0", "1.2.3"]
  , ["v0.0.0", "0.0.0foo"]
  , ["v0.0.1", "0.0.0"]
  , ["v1.0.0", "0.9.9"]
  , ["v0.10.0", "0.9.0"]
  , ["v0.99.0", "0.10.0"]
  , ["v2.0.0", "1.2.3"]
  , ["0.0.0", "v0.0.0foo"]
  , ["0.0.1", "v0.0.0"]
  , ["1.0.0", "v0.9.9"]
  , ["0.10.0", "v0.9.0"]
  , ["0.99.0", "v0.10.0"]
  , ["2.0.0", "v1.2.3"]
  , ["1.2.3", "1.2.3-asdf"]
  , ["1.2.3-4", "1.2.3"]
  , ["1.2.3-4-foo", "1.2.3"]
  , ["1.2.3-5", "1.2.3-5-foo"]
  , ["1.2.3-5", "1.2.3-4"]
  , ["1.2.3-5-foo", "1.2.3-5-Foo"]
  ];
  _.forEach(tests,function (v) {
    var v0 = v[1];
    var v1 = v[2];

    assertTrue(gt(v0, v1), "gt('"+v0+"', '"+v1+"')")
    assertTrue(lt(v1, v0), "lt('"+v1+"', '"+v0+"')")
    assertTrue(!gt(v1, v0), "!gt('"+v1+"', '"+v0+"')")
    assertTrue(!lt(v0, v1), "!lt('"+v0+"', '"+v1+"')")
    assertTrue(eq(v0, v0), "eq('"+v0+"', '"+v0+"')")
    assertTrue(eq(v1, v1), "eq('"+v1+"', '"+v1+"')")
    assertTrue(neq(v0, v1), "neq('"+v0+"', '"+v1+"')")
    assertTrue(cmp(v1, "==", v1), "cmp('"+v1+"' == '"+v1+"')")
    assertTrue(cmp(v0, ">=", v1), "cmp('"+v0+"' >= '"+v1+"')")
    assertTrue(cmp(v1, "<=", v0), "cmp('"+v1+"' <= '"+v0+"')")
    assertTrue(cmp(v0, "!=", v1), "cmp('"+v0+"' != '"+v1+"')")
  });
}

public void function equality_tests(t) {
var tests = [ ["1.2.3", "v1.2.3"]
  , ["1.2.3", "=1.2.3"]
  , ["1.2.3", "v 1.2.3"]
  , ["1.2.3", "= 1.2.3"]
  , ["1.2.3", " v1.2.3"]
  , ["1.2.3", " =1.2.3"]
  , ["1.2.3", " v 1.2.3"]
  , ["1.2.3", " = 1.2.3"]
  , ["1.2.3-0", "v1.2.3-0"]
  , ["1.2.3-0", "=1.2.3-0"]
  , ["1.2.3-0", "v 1.2.3-0"]
  , ["1.2.3-0", "= 1.2.3-0"]
  , ["1.2.3-0", " v1.2.3-0"]
  , ["1.2.3-0", " =1.2.3-0"]
  , ["1.2.3-0", " v 1.2.3-0"]
  , ["1.2.3-0", " = 1.2.3-0"]
  , ["1.2.3-01", "v1.2.3-1"]
  , ["1.2.3-01", "=1.2.3-1"]
  , ["1.2.3-01", "v 1.2.3-1"]
  , ["1.2.3-01", "= 1.2.3-1"]
  , ["1.2.3-01", " v1.2.3-1"]
  , ["1.2.3-01", " =1.2.3-1"]
  , ["1.2.3-01", " v 1.2.3-1"]
  , ["1.2.3-01", " = 1.2.3-1"]
  , ["1.2.3beta", "v1.2.3beta"]
  , ["1.2.3beta", "=1.2.3beta"]
  , ["1.2.3beta", "v 1.2.3beta"]
  , ["1.2.3beta", "= 1.2.3beta"]
  , ["1.2.3beta", " v1.2.3beta"]
  , ["1.2.3beta", " =1.2.3beta"]
  , ["1.2.3beta", " v 1.2.3beta"]
  , ["1.2.3beta", " = 1.2.3beta"]
  ];
  _.forEach(tests,function (v) {
    var v0 = v[1];
    var v1 = v[2];
    assertTrue(eq(v0, v1), "eq('"+v0+"', '"+v1+"')")
    assertTrue(!neq(v0, v1), "!neq('"+v0+"', '"+v1+"')")
    assertTrue(cmp(v0, "==", v1), "cmp("+v0+"=="+v1+")")
    assertTrue(!cmp(v0, "!=", v1), "!cmp("+v0+"!="+v1+")")
    assertTrue(!cmp(v0, "===", v1), "!cmp("+v0+"==="+v1+")")
    assertTrue(cmp(v0, "!==", v1), "cmp("+v0+"!=="+v1+")")
    assertTrue(!gt(v0, v1), "!gt('"+v0+"', '"+v1+"')")
    assertTrue(gte(v0, v1), "gte('"+v0+"', '"+v1+"')")
    assertTrue(!lt(v0, v1), "!lt('"+v0+"', '"+v1+"')")
    assertTrue(lte(v0, v1), "lte('"+v0+"', '"+v1+"')")
  });
}


public void function range_tests(t) {
var tests = [ ["1.0.0 - 2.0.0", "1.2.3"]
  , ["1.0.0", "1.0.0"]
  , [">=*", "0.2.4"]
  , ["", "1.0.0"]
  , ["*", "1.2.3"]
  , ["*", "v1.2.3-foo"]
  , [">=1.0.0", "1.0.0"]
  , [">=1.0.0", "1.0.1"]
  , [">=1.0.0", "1.1.0"]
  , [">1.0.0", "1.0.1"]
  , [">1.0.0", "1.1.0"]
  , ["<=2.0.0", "2.0.0"]
  , ["<=2.0.0", "1.9999.9999"]
  , ["<=2.0.0", "0.2.9"]
  , ["<2.0.0", "1.9999.9999"]
  , ["<2.0.0", "0.2.9"]
  , [">= 1.0.0", "1.0.0"]
  , [">=  1.0.0", "1.0.1"]
  , [">=   1.0.0", "1.1.0"]
  , ["> 1.0.0", "1.0.1"]
  , [">  1.0.0", "1.1.0"]
  , ["<=   2.0.0", "2.0.0"]
  , ["<= 2.0.0", "1.9999.9999"]
  , ["<=  2.0.0", "0.2.9"]
  , ["<    2.0.0", "1.9999.9999"]
  , ["<\t2.0.0", "0.2.9"]
  , [">=0.1.97", "v0.1.97"]
  , [">=0.1.97", "0.1.97"]
  , ["0.1.20 || 1.2.4", "1.2.4"]
  , [">=0.2.3 || <0.0.1", "0.0.0"]
  , [">=0.2.3 || <0.0.1", "0.2.3"]
  , [">=0.2.3 || <0.0.1", "0.2.4"]
  , ["||", "1.3.4"]
  , ["2.x.x", "2.1.3"]
  , ["1.2.x", "1.2.3"]
  , ["1.2.x || 2.x", "2.1.3"]
  , ["1.2.x || 2.x", "1.2.3"]
  , ["x", "1.2.3"]
  , ["2.*.*", "2.1.3"]
  , ["1.2.*", "1.2.3"]
  , ["1.2.* || 2.*", "2.1.3"]
  , ["1.2.* || 2.*", "1.2.3"]
  , ["*", "1.2.3"]
  , ["2", "2.1.2"]
  , ["2.3", "2.3.1"]
  , ["~2.4", "2.4.0"] // >=2.4.0 <2.5.0
  , ["~2.4", "2.4.5"]
  , ["~>3.2.1", "3.2.2"] // >=3.2.1 <3.3.0
  , ["~1", "1.2.3"] // >=1.0.0 <2.0.0
  , ["~>1", "1.2.3"]
  , ["~> 1", "1.2.3"]
  , ["~1.0", "1.0.2"] // >=1.0.0 <1.1.0
  , ["~ 1.0", "1.0.2"]
  , [">=1", "1.0.0"]
  , [">= 1", "1.0.0"]
  , ["<1.2", "1.1.1"]
  , ["< 1.2", "1.1.1"]
  , ["1", "1.0.0beta"]
  , ["~v0.5.4-pre", "0.5.5"]
  , ["~v0.5.4-pre", "0.5.4"]
  , ["=0.7.x", "0.7.2"]
  , [">=0.7.x", "0.7.2"]
  , ["=0.7.x", "0.7.0-asdf"]
  , [">=0.7.x", "0.7.0-asdf"]
  , ["<=0.7.x", "0.6.2"]
  ];
  _.forEach(tests,function (v) {
    assertTrue(satisfies(v[2], v[1]), v[1]+" satisfied by "+v[2])
  });
}

public void function negative_range_tests(t) {
var tests = [ ["1.0.0 - 2.0.0", "2.2.3"]
  , ["1.0.0", "1.0.1"]
  , [">=1.0.0", "0.0.0"]
  , [">=1.0.0", "0.0.1"]
  , [">=1.0.0", "0.1.0"]
  , [">1.0.0", "0.0.1"]
  , [">1.0.0", "0.1.0"]
  , ["<=2.0.0", "3.0.0"]
  , ["<=2.0.0", "2.9999.9999"]
  , ["<=2.0.0", "2.2.9"]
  , ["<2.0.0", "2.9999.9999"]
  , ["<2.0.0", "2.2.9"]
  , [">=0.1.97", "v0.1.93"]
  , [">=0.1.97", "0.1.93"]
  , ["0.1.20 || 1.2.4", "1.2.3"]
  , [">=0.2.3 || <0.0.1", "0.0.3"]
  , [">=0.2.3 || <0.0.1", "0.2.2"]
  , ["2.x.x", "1.1.3"]
  , ["2.x.x", "3.1.3"]
  , ["1.2.x", "1.3.3"]
  , ["1.2.x || 2.x", "3.1.3"]
  , ["1.2.x || 2.x", "1.1.3"]
  , ["2.*.*", "1.1.3"]
  , ["2.*.*", "3.1.3"]
  , ["1.2.*", "1.3.3"]
  , ["1.2.* || 2.*", "3.1.3"]
  , ["1.2.* || 2.*", "1.1.3"]
  , ["2", "1.1.2"]
  , ["2.3", "2.4.1"]
  , ["~2.4", "2.5.0"] // >=2.4.0 <2.5.0
  , ["~2.4", "2.3.9"]
  , ["~>3.2.1", "3.3.2"] // >=3.2.1 <3.3.0
  , ["~>3.2.1", "3.2.0"] // >=3.2.1 <3.3.0
  , ["~1", "0.2.3"] // >=1.0.0 <2.0.0
  , ["~>1", "2.2.3"]
  , ["~1.0", "1.1.0"] // >=1.0.0 <1.1.0
  , ["<1", "1.0.0"]
  , [">=1.2", "1.1.1"]
  , ["1", "2.0.0beta"]
  , ["~v0.5.4-beta", "0.5.4-alpha"]
  , ["<1", "1.0.0beta"]
  , ["< 1", "1.0.0beta"]
  , ["=0.7.x", "0.8.2"]
  , [">=0.7.x", "0.6.2"]
  , ["<=0.7.x", "0.7.2"]
  ];
  _.forEach(tests,function (v) {
    assertTrue(!satisfies(v[2], v[1]), v[1]+" not satisfied by "+v[2])
  });
}

public void function increment_versions_test(t) {
var tests = [ [ "1.2.3",   "major", "2.0.0"   ]
  , [ "1.2.3",   "minor", "1.3.0"   ]
  , [ "1.2.3",   "patch", "1.2.4"   ]
  , [ "1.2.3",   "build", "1.2.3-1" ]
  , [ "1.2.3-4", "build", "1.2.3-5" ]
  , [ "1.2.3tag",    "major", "2.0.0"   ]
  , [ "1.2.3-tag",   "major", "2.0.0"   ]
  , [ "1.2.3tag",    "build", "1.2.3-1" ]
  , [ "1.2.3-tag",   "build", "1.2.3-1" ]
  , [ "1.2.3-4-tag", "build", "1.2.3-5" ]
  , [ "1.2.3-4tag",  "build", "1.2.3-5" ]
  , [ "1.2.3", "fake",  null ]
  , [ "fake",  "major", null ]
  ];
  _.forEach(tests,function (v) {
    assertEquals(inc(v[1], v[2]), v[2], "inc("+v[1]+", "+v[2]+") === "+v[2])
  })
}

public void function replace_stars_test(t) {
var tests = [ [ "", "" ]
  , [ "*", "" ]
  , [ "> *", "" ]
  , [ "<*", "" ]
  , [ " >=  *", "" ]
  , [ "* || 1.2.3", " || 1.2.3" ]
  ];
  _.forEach(tests,function (v) {
    assertEquals(replaceStars(v[1]), v[2], "replaceStars("+v[1]+") === "+v[2])
  });
};

public void function valid_range_test(t) {
var tests = [ ["1.0.0 - 2.0.0", ">=1.0.0 <=2.0.0"]
  , ["1.0.0", "1.0.0"]
  , [">=*", ""]
  , ["", ""]
  , ["*", ""]
  , ["*", ""]
  , [">=1.0.0", ">=1.0.0"]
  , [">1.0.0", ">1.0.0"]
  , ["<=2.0.0", "<=2.0.0"]
  , ["1", ">=1.0.0- <2.0.0-"]
  , ["<=2.0.0", "<=2.0.0"]
  , ["<=2.0.0", "<=2.0.0"]
  , ["<2.0.0", "<2.0.0"]
  , ["<2.0.0", "<2.0.0"]
  , [">= 1.0.0", ">=1.0.0"]
  , [">=  1.0.0", ">=1.0.0"]
  , [">=   1.0.0", ">=1.0.0"]
  , ["> 1.0.0", ">1.0.0"]
  , [">  1.0.0", ">1.0.0"]
  , ["<=   2.0.0", "<=2.0.0"]
  , ["<= 2.0.0", "<=2.0.0"]
  , ["<=  2.0.0", "<=2.0.0"]
  , ["<    2.0.0", "<2.0.0"]
  , ["<	2.0.0", "<2.0.0"]
  , [">=0.1.97", ">=0.1.97"]
  , [">=0.1.97", ">=0.1.97"]
  , ["0.1.20 || 1.2.4", "0.1.20||1.2.4"]
  , [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"]
  , [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"]
  , [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"]
  , ["||", "||"]
  , ["2.x.x", ">=2.0.0- <3.0.0-"]
  , ["1.2.x", ">=1.2.0- <1.3.0-"]
  , ["1.2.x || 2.x", ">=1.2.0- <1.3.0-||>=2.0.0- <3.0.0-"]
  , ["1.2.x || 2.x", ">=1.2.0- <1.3.0-||>=2.0.0- <3.0.0-"]
  , ["x", ""]
  , ["2.*.*", null]
  , ["1.2.*", null]
  , ["1.2.* || 2.*", null]
  , ["1.2.* || 2.*", null]
  , ["*", ""]
  , ["2", ">=2.0.0- <3.0.0-"]
  , ["2.3", ">=2.3.0- <2.4.0-"]
  , ["~2.4", ">=2.4.0- <2.5.0-"]
  , ["~2.4", ">=2.4.0- <2.5.0-"]
  , ["~>3.2.1", ">=3.2.1- <3.3.0-"]
  , ["~1", ">=1.0.0- <2.0.0-"]
  , ["~>1", ">=1.0.0- <2.0.0-"]
  , ["~> 1", ">=1.0.0- <2.0.0-"]
  , ["~1.0", ">=1.0.0- <1.1.0-"]
  , ["~ 1.0", ">=1.0.0- <1.1.0-"]
  , ["<1", "<1.0.0-"]
  , ["< 1", "<1.0.0-"]
  , [">=1", ">=1.0.0-"]
  , [">= 1", ">=1.0.0-"]
  , ["<1.2", "<1.2.0-"]
  , ["< 1.2", "<1.2.0-"]
  , ["1", ">=1.0.0- <2.0.0-"]
  ];
  _.forEach(tests,function (v) {
    assertEquals(validRange(v[1]), v[2], "validRange("+v[1]+") === "+v[2])
  });
};

public void function comparators_test(t) {
var tests = [ ["1.0.0 - 2.0.0", [[">=1.0.0", "<=2.0.0"]] ]
  , ["1.0.0", [["1.0.0"]] ]
  , [">=*", [[">=0.0.0-"]] ]
  , ["", [[""]]]
  , ["*", [[""]] ]
  , ["*", [[""]] ]
  , [">=1.0.0", [[">=1.0.0"]] ]
  , [">=1.0.0", [[">=1.0.0"]] ]
  , [">=1.0.0", [[">=1.0.0"]] ]
  , [">1.0.0", [[">1.0.0"]] ]
  , [">1.0.0", [[">1.0.0"]] ]
  , ["<=2.0.0", [["<=2.0.0"]] ]
  , ["1", [[">=1.0.0-", "<2.0.0-"]] ]
  , ["<=2.0.0", [["<=2.0.0"]] ]
  , ["<=2.0.0", [["<=2.0.0"]] ]
  , ["<2.0.0", [["<2.0.0"]] ]
  , ["<2.0.0", [["<2.0.0"]] ]
  , [">= 1.0.0", [[">=1.0.0"]] ]
  , [">=  1.0.0", [[">=1.0.0"]] ]
  , [">=   1.0.0", [[">=1.0.0"]] ]
  , ["> 1.0.0", [[">1.0.0"]] ]
  , [">  1.0.0", [[">1.0.0"]] ]
  , ["<=   2.0.0", [["<=2.0.0"]] ]
  , ["<= 2.0.0", [["<=2.0.0"]] ]
  , ["<=  2.0.0", [["<=2.0.0"]] ]
  , ["<    2.0.0", [["<2.0.0"]] ]
  , ["<\t2.0.0", [["<2.0.0"]] ]
  , [">=0.1.97", [[">=0.1.97"]] ]
  , [">=0.1.97", [[">=0.1.97"]] ]
  , ["0.1.20 || 1.2.4", [["0.1.20"], ["1.2.4"]] ]
  , [">=0.2.3 || <0.0.1", [[">=0.2.3"], ["<0.0.1"]] ]
  , [">=0.2.3 || <0.0.1", [[">=0.2.3"], ["<0.0.1"]] ]
  , [">=0.2.3 || <0.0.1", [[">=0.2.3"], ["<0.0.1"]] ]
  , ["||", [[""], [""]] ]
  , ["2.x.x", [[">=2.0.0-", "<3.0.0-"]] ]
  , ["1.2.x", [[">=1.2.0-", "<1.3.0-"]] ]
  , ["1.2.x || 2.x", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
  , ["1.2.x || 2.x", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
  , ["x", [[""]] ]
  , ["2.*.*", [[">=2.0.0-", "<3.0.0-"]] ]
  , ["1.2.*", [[">=1.2.0-", "<1.3.0-"]] ]
  , ["1.2.* || 2.*", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
  , ["1.2.* || 2.*", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
  , ["*", [[""]] ]
  , ["2", [[">=2.0.0-", "<3.0.0-"]] ]
  , ["2.3", [[">=2.3.0-", "<2.4.0-"]] ]
  , ["~2.4", [[">=2.4.0-", "<2.5.0-"]] ]
  , ["~2.4", [[">=2.4.0-", "<2.5.0-"]] ]
  , ["~>3.2.1", [[">=3.2.1-", "<3.3.0-"]] ]
  , ["~1", [[">=1.0.0-", "<2.0.0-"]] ]
  , ["~>1", [[">=1.0.0-", "<2.0.0-"]] ]
  , ["~> 1", [[">=1.0.0-", "<2.0.0-"]] ]
  , ["~1.0", [[">=1.0.0-", "<1.1.0-"]] ]
  , ["~ 1.0", [[">=1.0.0-", "<1.1.0-"]] ]
  , ["<1", [["<1.0.0-"]] ]
  , ["< 1", [["<1.0.0-"]] ]
  , [">=1", [[">=1.0.0-"]] ]
  , [">= 1", [[">=1.0.0-"]] ]
  , ["<1.2", [["<1.2.0-"]] ]
  , ["< 1.2", [["<1.2.0-"]] ]
  , ["1", [[">=1.0.0-", "<2.0.0-"]] ]
  ];
  _.forEach(tests,function (v) {
    assertEquals(toComparators(v[1]), v[2], "toComparators("+v[1]+") === "+JSON.stringify(v[2]))
  });
 }
	public void function setUp() {
		variables.console = new foundry.core.console();
    variables._ = new foundry.core.util();
		console.log("==============");
	}

	public void function tearDown() {
		console.log("==============");
		structDelete(variables,'console');
	}

	private any function fixture_path(path) {
		//return variables.Path.join(FIXTURE_ROOT, path);
	}
}